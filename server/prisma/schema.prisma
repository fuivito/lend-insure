generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BrokerRole {
  BROKER
  BROKER_ADMIN
  INTERNAL
}

enum AgreementStatus {
  DRAFT
  PROPOSED
  SIGNED
  ACTIVE
  DEFAULTED
  TERMINATED
}

enum InstalmentStatus {
  UPCOMING
  PAID
  MISSED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum OrganisationStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

model Organisation {
  id            String              @id @default(uuid())
  name          String
  status        OrganisationStatus  @default(ACTIVE)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  brokerUsers   BrokerUser[]
  clients       Client[]
  policies      Policy[]
  agreements    Agreement[]
  auditLogs     AuditLog[]

  @@map("organisations")
}

model BrokerUser {
  id              String      @id @default(uuid())
  organisationId  String
  role            BrokerRole
  email           String      @unique
  name            String
  passwordHash    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  organisation    Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@index([organisationId])
  @@map("broker_users")
}

model Client {
  id              String      @id @default(uuid())
  organisationId  String
  firstName       String
  lastName        String
  email           String
  phone           String?
  dob             DateTime?
  address         String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  organisation    Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  policies        Policy[]
  agreements      Agreement[]

  @@index([organisationId])
  @@index([email])
  @@map("clients")
}

model Policy {
  id              String      @id @default(uuid())
  organisationId  String
  clientId        String
  insurerName     String
  productType     String
  policyNumber    String
  inceptionDate   DateTime
  expiryDate      DateTime
  grossPremium    Decimal     @db.Decimal(10, 2)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  organisation    Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  client          Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  agreements      Agreement[]

  @@index([organisationId])
  @@index([clientId])
  @@map("policies")
}

model Agreement {
  id                String           @id @default(uuid())
  organisationId    String
  clientId          String
  policyId          String
  principalAmount   Decimal          @db.Decimal(10, 2)
  aprBps            Int
  termMonths        Int
  status            AgreementStatus  @default(DRAFT)
  startDate         DateTime?
  endDate           DateTime?
  outstandingAmount Decimal          @db.Decimal(10, 2)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  organisation      Organisation          @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  client            Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  policy            Policy                @relation(fields: [policyId], references: [id], onDelete: Cascade)
  instalments       Instalment[]
  payments          Payment[]
  creditChecks      CreditCheck[]
  events            AgreementEvent[]
  documents         AgreementDocument[]
  commissionLines   CommissionLine[]

  @@index([organisationId])
  @@index([clientId])
  @@index([status])
  @@map("agreements")
}

model Instalment {
  id          String            @id @default(uuid())
  agreementId String
  sequence    Int
  dueDate     DateTime
  amountDue   Decimal           @db.Decimal(10, 2)
  amountPaid  Decimal           @default(0) @db.Decimal(10, 2)
  status      InstalmentStatus  @default(UPCOMING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  agreement   Agreement         @relation(fields: [agreementId], references: [id], onDelete: Cascade)
  payments    Payment[]

  @@index([agreementId])
  @@map("instalments")
}

model Payment {
  id            String        @id @default(uuid())
  agreementId   String
  instalmentId  String?
  amount        Decimal       @db.Decimal(10, 2)
  collectedAt   DateTime      @default(now())
  method        String
  status        PaymentStatus @default(COMPLETED)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  agreement     Agreement     @relation(fields: [agreementId], references: [id], onDelete: Cascade)
  instalment    Instalment?   @relation(fields: [instalmentId], references: [id], onDelete: SetNull)

  @@index([agreementId])
  @@map("payments")
}

model CreditCheck {
  id          String   @id @default(uuid())
  agreementId String
  provider    String
  score       Int?
  decision    String
  payload     Json?
  createdAt   DateTime @default(now())

  agreement   Agreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)

  @@index([agreementId])
  @@map("credit_checks")
}

model AgreementEvent {
  id          String   @id @default(uuid())
  agreementId String
  type        String
  actorType   String
  meta        Json?
  createdAt   DateTime @default(now())

  agreement   Agreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)

  @@index([agreementId])
  @@map("agreement_events")
}

model AgreementDocument {
  id          String   @id @default(uuid())
  agreementId String
  kind        String
  storageKey  String
  createdAt   DateTime @default(now())

  agreement   Agreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)

  @@index([agreementId])
  @@map("agreement_documents")
}

model CommissionLine {
  id            String   @id @default(uuid())
  agreementId   String
  type          String
  amount        Decimal  @db.Decimal(10, 2)
  currency      String   @default("GBP")
  calculatedAt  DateTime @default(now())

  agreement     Agreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)

  @@index([agreementId])
  @@map("commission_lines")
}

model AuditLog {
  id              String   @id @default(uuid())
  organisationId  String
  actorType       String
  action          String
  entity          String
  before          Json?
  after           Json?
  createdAt       DateTime @default(now())

  organisation    Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@index([organisationId])
  @@index([createdAt])
  @@map("audit_logs")
}
